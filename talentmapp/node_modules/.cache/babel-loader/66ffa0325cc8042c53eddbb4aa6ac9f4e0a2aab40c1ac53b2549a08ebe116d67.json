{"ast":null,"code":"import { getTestContext } from '../../../gl/shader/program/getTestContext.mjs';\n\"use strict\";\nlet maxRecommendedTexturesCache = null;\nfunction maxRecommendedTextures() {\n  if (maxRecommendedTexturesCache) return maxRecommendedTexturesCache;\n  const gl = getTestContext();\n  maxRecommendedTexturesCache = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  return maxRecommendedTexturesCache;\n}\nexport { maxRecommendedTextures };","map":{"version":3,"names":["maxRecommendedTexturesCache","maxRecommendedTextures","gl","getTestContext","getParameter","MAX_TEXTURE_IMAGE_UNITS"],"sources":["/Users/florianmorina/Desktop/TalentMapp/Talentmapp/talentmapp/node_modules/pixi.js/src/rendering/renderers/shared/texture/utils/maxRecommendedTextures.ts"],"sourcesContent":["import { getTestContext } from '../../../gl/shader/program/getTestContext';\n\nlet maxRecommendedTexturesCache: number | null = null;\n\n/**\n * Returns the maximum recommended texture units to use. This uses WebGL1's `MAX_TEXTURE_IMAGE_UNITS`.\n * The response for this is that to get this info via WebGPU, we would need to make a context, which\n * would make this function async, and we want to avoid that.\n * @private\n * @returns {number} The maximum recommended texture units to use.\n */\nexport function maxRecommendedTextures(): number\n{\n    if (maxRecommendedTexturesCache) return maxRecommendedTexturesCache;\n\n    const gl = getTestContext();\n\n    maxRecommendedTexturesCache = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n    return maxRecommendedTexturesCache;\n}\n"],"mappings":";;AAEA,IAAIA,2BAA6C;AAS1C,SAASC,sBAChBA,CAAA;EACQ,IAAAD,2BAAA,EAAoC,OAAAA,2BAAA;EAExC,MAAME,EAAA,GAAKC,cAAe;EAEIH,2BAAA,GAAAE,EAAA,CAAGE,YAAa,CAAAF,EAAA,CAAGG,uBAAuB;EAEjE,OAAAL,2BAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}